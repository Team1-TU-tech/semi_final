services:
  kafka1:
    image: bitnami/kafka:3.1.0
    container_name: kafka1
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_REPLICATION_FACTOR=3 #복제본 수 설정
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
    ports:
      - "9092:9092"
    deploy:
      resources:
        limits:
          memory: "16G"
          cpus: "4"
        reservations:
          memory: "8G"
          cpus: "2"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    restart: on-failure
    networks:
      - kafka_network

  kafka2:
    image: bitnami/kafka:3.1.0
    container_name: kafka2
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9093
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_REPLICATION_FACTOR=3  # 복제본 수 설정
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
    ports:
      - "9093:9093"
    deploy:
      resources:
        limits:
          memory: "16G"
          cpus: "4"
        reservations:
          memory: "8G"
          cpus: "2"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    restart: on-failure
    networks:
      - kafka_network

  kafka3:
    image: bitnami/kafka:3.1.0
    container_name: kafka3
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9094
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9094
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_REPLICATION_FACTOR=3  # 복제본 수 설정
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
    ports:
      - "9094:9094"
    deploy:
      resources:
        limits:
          memory: "16G"
          cpus: "4"
        reservations:
          memory: "8G"
          cpus: "2"
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    restart: on-failure
    networks:
      - kafka_network
  
  zookeeper1:
    image: bitnami/zookeeper:3.6.3
    container_name: zookeeper1
    hostname: zookeeper1
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_MY_ID=1
        #- ZOO_SERVERS=zookeeper1:2888:3889;zookeeper2:2888:3889;zookeeper3:2888:3889
      - ZOO_TICK_TIME=2000  # 2초
      - ZOO_INIT_LIMIT=10   # 초기 연결 제한 시간
      - ZOO_SYNC_LIMIT=5    # 동기화 제한 시간
    ports:
      - "2181:2181"
    networks:
      - kafka_network

  zookeeper2:
    image: bitnami/zookeeper:3.6.3
    container_name: zookeeper2
    hostname: zookeeper2
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_MY_ID=2
        #- ZOO_SERVERS=zookeeper1:2888:3889;zookeeper2:2888:3889;zookeeper3:2888:3889
      - ZOO_TICK_TIME=2000  # 2초
      - ZOO_INIT_LIMIT=10   # 초기 연결 제한 시간
      - ZOO_SYNC_LIMIT=5    # 동기화 제한 시간
    ports:
      - "2182:2181"
    networks:
      - kafka_network

  zookeeper3:
    image: bitnami/zookeeper:3.6.3
    container_name: zookeeper3
    hostname: zookeeper3
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_MY_ID=3
        #- ZOO_SERVERS=zookeeper1:2888:3889;zookeeper2:2888:3889;zookeeper3:2888:3889
      - ZOO_TICK_TIME=2000  # 2초
      - ZOO_INIT_LIMIT=10   # 초기 연결 제한 시간
      - ZOO_SYNC_LIMIT=5    # 동기화 제한 시간
    ports:
      - "2183:2181"
    networks:
      - kafka_network

  producer:
    build: .                   # Dockerfile로 이미지 빌드
    image: kafka-producer
    container_name: kafka-producer
    working_dir: /app
    volumes:
      - ./src/semi_final:/app
      - ./kafka-config.yaml:/app/kafka-config.yaml
    environment:
      - KAFKA_CONFIG=/app/kafka-config.yaml
    command: python /app/pro.py
    depends_on:
      - kafka1
      - consumer
    restart: on-failure
    networks:
      - kafka_network


  consumer:
    build: .
    image: kafka-consumer
    container_name: kafka-consumer
    working_dir: /app
    volumes:
      - ./src/semi_final:/app
      - ./kafka-config.yaml:/app/kafka-config.yaml
    environment:
      - KAFKA_CONFIG=/app/kafka-config.yaml
      - DB_USER=${DB_USER}   # 환경 변수로 DB_USER 사용
      - DB_PASSWORD=${DB_PASSWORD}   # 환경 변수로 DB_PASSWORD 사용
    command: python /app/con.py
    depends_on:
      - kafka1
        #- database
    restart: on-failure
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge

