services:
  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2  # min.insync.replicas 설정 추가
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9093
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2  # 모든 브로커에 동일하게 설정
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9094
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9094
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2  # 모든 브로커에 동일하게 설정
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - kafka_network
  
  producer:
    build: .                   # Dockerfile로 이미지 빌드
    image: kafka-producer
    container_name: kafka-producer
    working_dir: /app
    volumes:
      - ./src/semi_final:/app
      - ./kafka-config.yaml:/app/kafka-config.yaml
    environment:
      - KAFKA_CONFIG=/app/kafka-config.yaml
    command: python /app/pro.py
    depends_on:
      - kafka1
      - consumer
    restart: on-failure
    networks:
      - kafka_network


  consumer:
    build: .
    image: kafka-consumer
    container_name: kafka-consumer
    working_dir: /app
    volumes:
      - ./src/semi_final:/app
      - ./kafka-config.yaml:/app/kafka-config.yaml
    environment:
      - KAFKA_CONFIG=/app/kafka-config.yaml
      - DB_USER=${DB_USER}   # 환경 변수로 DB_USER 사용
      - DB_PASSWORD=${DB_PASSWORD}   # 환경 변수로 DB_PASSWORD 사용
    command: python /app/con.py
    depends_on:
      - kafka1
        #- database
    restart: on-failure
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge

